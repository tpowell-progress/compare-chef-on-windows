# escape=`
FROM mcr.microsoft.com/windows/servercore:ltsc2019

ARG INSTALL_DUMPBIN=False
ENV INSTALL_DUMPBIN=${INSTALL_DUMPBIN}

# Set up PowerShell execution policy
SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

# Conditionally install Visual Studio Build Tools for dumpbin
RUN if ($env:INSTALL_DUMPBIN -eq 'True') { `
        Write-Host 'Installing Visual Studio Build Tools for dumpbin...'; `
        Write-Host 'Downloading installer...'; `
        Invoke-WebRequest -Uri 'https://aka.ms/vs/17/release/vs_buildtools.exe' -OutFile 'vs_buildtools.exe'; `
        Write-Host 'Running VS Build Tools installer (this will take several minutes)...'; `
        $process = Start-Process vs_buildtools.exe -ArgumentList '--quiet', '--wait', '--norestart', '--nocache', '--installPath', \"${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\BuildTools\", '--add', 'Microsoft.VisualStudio.Workload.VCTools', '--includeRecommended' -Wait -PassThru; `
        Write-Host \"Installer exit code: $($process.ExitCode)\"; `
        Remove-Item vs_buildtools.exe -Force -ErrorAction SilentlyContinue; `
        Write-Host 'Attempting to add dumpbin to PATH if it was installed...'; `
        $vsPath = Join-Path ${env:ProgramFiles(x86)} 'Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC'; `
        if (Test-Path $vsPath) { `
            $msvcVersion = (Get-ChildItem $vsPath | Sort-Object Name -Descending | Select-Object -First 1).Name; `
            $dumpbinPath = Join-Path (Join-Path (Join-Path $vsPath $msvcVersion) 'bin\Hostx64') 'x64'; `
            [Environment]::SetEnvironmentVariable('PATH', $env:PATH + ';' + $dumpbinPath, [EnvironmentVariableTarget]::Machine); `
            Write-Host \"Added dumpbin to PATH: $dumpbinPath\"; `
        } else { `
            Write-Host 'VS Build Tools directory not found - dumpbin may not be available'; `
        } `
    } else { `
        Write-Host 'Skipping Visual Studio Build Tools installation (INSTALL_DUMPBIN=False)'; `
    }

# Copy MSI file to container
COPY chef-installer.msi C:\chef-installer.msi

# Install Chef from MSI
RUN Write-Host 'Installing Chef from MSI...'; `
    Start-Process msiexec.exe -ArgumentList '/i', 'C:\chef-installer.msi', '/qn', '/norestart' -Wait; `
    Remove-Item C:\chef-installer.msi -Force

# Accept Chef license
ENV CHEF_LICENSE=accept-silent

# Create directories for Chef
RUN New-Item -ItemType Directory -Force -Path C:\chef; `
    New-Item -ItemType Directory -Force -Path C:\cookbooks; `
    New-Item -ItemType Directory -Force -Path C:\shared

# Set working directory
WORKDIR C:\chef

# Default command
CMD ["powershell"]
